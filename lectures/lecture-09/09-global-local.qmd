---
title: QTM 151 - Introduction to Statistical Computing II
subtitle: "Lecture 09 - Global and Local Variables"
date: 2024-09-30
date-format: "DD MMMM, YYYY"
author:
  - name: Danilo Freire
    email: danilo.freire@emory.edu
    affiliations: Emory University
format:
  clean-revealjs:
    self-contained: true
    footer: "[Global and Local Vars](https://raw.githack.com/danilofreire/qtm151/main/lectures/lecture-09/09-global-local.html)"
transition: slide
transition-speed: default
scrollable: true
engine: jupyter
editor:
  render-on-save: true
---

# Hello again! 🥳 {background-color="#2d4563"}

# Recap of last class 📚 {background-color="#2d4563"}

## In our last class, we learned

:::{style="margin-top: 30px; font-size: 28px;"}
:::{.columns}
:::{.column width="50%"}
- How to write functions with `def` and `return`
- What [paratemers, arguments, and return values]{.alert} are
- How to combine functions with `if` statements
- How to use [lambda](https://realpython.com/python-lambda/) to create quick, throwaway functions
:::

:::{.column width="50%"}
![](figures/functions.webp){width="80%"}

![](figures/lambda.jpg){width="80%"}
:::
:::
:::

## Today's plan 📅 

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
- Today, we will learn about [variable scope](https://ksvmuralidhar.medium.com/understanding-the-scope-of-the-variables-in-python-d83a95b73d90) in Python
- Scope is important because it determines the [visibility of variables]{.alert}, that is, where you can access them in your code
- We will learn about [local, enclosing, global, and built-in scopes](https://realpython.com/python-scope-legb-rule/)
- We will also learn about the `global` keyword
- We will see how to use the `apply` and `map` functions to apply functions to many variables at once
- Finally, we will learn about `.py` files and how to import them as modules
:::

:::{.column width="50%"}
![](figures/scope.png){width="100%"}
:::
:::
:::

# Understanding scope in Python 🧐 {background-color="#2d4563"}

## What is variable scope?

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
- Scope is the [area of a programme where a variable is accessible]{.alert}
- Think of scope as a variable's "visibility" in different parts of your code
- Python uses the [LEGB rule]{.alert} to determine variable scope:
    - [Local]{.alert}: Inside the current function
    - [Enclosing]{.alert}: Inside enclosing/nested functions
    - [Global]{.alert}: At the top level of the module
    - [Built-in]{.alert}: In the built-in namespace

- The LEGB rule defines the order Python searches for variables
:::

:::{.column width="50%"}
- It is easier to understand them with an example:

```python
x = 10  # Global scope

def print_x():
    x = 20  # Local scope
    print(x)  # Prints 20 (local)

print_x()

print(x)  # Prints 10 (global)
```
:::
:::
:::

## Global scope
### Variables defined outside a function

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
- Most variables we have seen so far are in the [global scope]{.alert}
  - Example: `x = 10` is a global variable
- They are stored in the [global namespace]{.alert} and are [accessible]{.alert} from anywhere in the code
- Global variables are created when you assign them values, and are destroyed when you close Python

```{python}
#| echo: true
#| eval: true
message_hello = "hello"
number3       = 3

print(message_hello + " world")
print(number3 * 2)
```
:::

:::{.column width="50%"}
- Global variables can be used in your code, but [you should be careful with them when writing functions]{.alert}
- The reason is that functions can change the value of global variables, which can lead to [unexpected results]{.alert}
- It is recommended to include all variables that a function needs as [parameters]{.alert}
:::
:::
:::

## Global scope
### Recommended and not recommended practices

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
- Let's create a function that sums 3 numbers
- $f(x,y,z) = x + y + z$
- We will pass the numbers as arguments to the function

```{python}
#| echo: true
#| eval: true
# Correct example:
def fn_add_recommended(x,y,z):
    return(x + y + z)

print(fn_add_recommended(x = 1, y = 2, z = 5))
print(fn_add_recommended(x = 1, y = 2, z = 10))
```
:::

:::{.column width="50%"}
- If you do not include the variables as parameters, Python will try to use global variables if they exist
  
```{python}
#| echo: true
#| eval: true
# Incorrect example:
def fn_add_notrecommended(x,y):
    return(x + y + z)

z = 5
print(fn_add_notrecommended(x = 1, y = 2))
z = 10
print(fn_add_notrecommended(x = 1, y = 2)) 
```

```python
del z # Remove variable z from global scope
print(fn_add_notrecommended(x = 1, y = 2)) 
```
```verbatim
NameError: name 'z' is not defined
```
:::
:::
:::

## Local scope
### Variables defined inside a function

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
- Variables defined inside a function are [local]{.alert} to that function
- They are [not accessible]{.alert} outside the function
- Local variables are [destroyed]{.alert} when the function returns
- If you try to access a local variable outside the function, you will get a `NameError`
- They include [parameters]{.alert} and [variables created inside the function]{.alert}
:::

:::{.column width="50%"}
- Example:
- In the code below, `x` is a local variable to the function `print_x()`

```{python}
#| echo: true
#| eval: false 
def print_x():
    x = 20  # Local scope
    print(x)  # Prints 20 (local)

print_x() # Prints 20

print(x)  # NameError: name 'x' is not defined
```
```verbatim
>>> print_x()
20
>>> print(x)  # NameError: name 'x' is not defined
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'x' is not defined
```
:::
:::
:::

## Local variables supercede global variables
### Remember the LEGB rule

:::{style="margin-top: 30px; font-size: 22px;"}
```{python}
#| echo: true
#| eval: true
# This is an example where we define a quadratic function
# (x,y) are both local variables of the function
# 
# When we call the function, only the arguments matter.
# any intermediate value inside the function

def fn_square(x):
    y = x**2
    return(y)

x = 5
y = -5

print(fn_square(x = 1))

print(x)
print(y)
``` 
:::

## Local variables are not stored in the working environment

:::{style="margin-top: 30px; font-size: 22px;"}
```{python}
#| echo: true
#| eval: true
# The following code assigns a global variable x
# Inside the function

x = 5
y = 4

print("Example 1:")
print(fn_square(x = 10))
print(x)
print(y)

print("Example 2:")
print(fn_square(x = 20))
print(x)
print(y)
```
:::

## Permanent changes to global variables

:::{style="margin-top: 30px; font-size: 22px;"}
:::{.columns}
:::{.column width="50%"}
- If you want to change a global variable inside a function, you need to use the `global` keyword
- The `global` keyword tells Python that you want to use the global variable, not create a new local variable

```{python}
#| echo: true
#| eval: true
def modify_x():
    global x
    x = x + 5

x = 1

modify_x()
print(x)
```
:::

:::{.column width="50%"}
- I don't think I have ever used `global` in my code
- It makes the code harder to read and understand
- You should avoid it too 😉
:::
:::
:::

## Try it out! 🚀 {#sec:exercise-01}

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
```{python}
#| echo: true
#| eval: true
def modify_x():
    global x
    x = x + 5

x = 1

modify_x()
print(x)
```
:::

:::{.column width="50%"}
- What happens if we run the function `modify_x()` again?
- What happens if we add `global y` inside `fn_square`?
- [[Appendix 01]{.button}](#sec:appendix-01)
:::
:::
:::

## Built-in scope
### Variables defined in Python

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
- We have also seen many [built-in functions]{.alert} in Python, like `print()`, `len()`, `sum()`, etc
- They are available in any part of your code, and you don't need to define them
- Python has a list of variables that are always available to prevent you from using the same names
- Most of them are error names

```{python}
#| echo: true
#| eval: true
print(len("hello"))

m = min([4, 3, 1, 7])
print(m)
```
:::

:::{.column width="50%"}
```{python}
#| echo: true
#| eval: true
import builtins

# View a list of attributes of a given object with dir()
print(dir(builtins))
```
:::
:::
:::

## Enclosing scope
### Variables defined in enclosing functions

:::{style="margin-top: 30px; font-size: 24px;"}
- They are variables defined in [enclosing functions]{.alert}
- Enclosing functions are [functions that contain other functions]{.alert} (nested functions)
- Enclosing scope is between local and global scopes in the LEGB rule
- They are easier to understand once you understand local and global scopes
- We will not use them much in this course
:::

## Enclosing scope
### Variables defined in enclosing functions

:::{style="margin-top: 30px; font-size: 22px;"}
:::{.columns}
:::{.column width="50%"}
```{python}
#| echo: true
#| eval: true
# Define a function that 
# contains another function
def outer():
    x = "outer x" # Local to outer()
    
    # Define a nested function
    def inner():
        x = "inner x" # Local to inner()
        print(x) # Print local to inner()

    inner() # Run inner()
    print(x) # Print local to outer()

outer() # Run outer()
```
:::

:::{.column width="50%"}
```{python}
#| echo: true
#| eval: true
# Define a function that 
# contains another function
def outer():
    x = "outer x" # Local to outer()
    
    # Define a nested function
    def inner():
        # x = "inner x" 
        print(x) # No local x, so use enclosing x

    inner() # Run inner()
    print(x) # Print local to outer()

outer() # Run outer()
```
:::
:::
:::

# Operations over many variables 🧮 {background-color="#2d4563"}

## Pandas

:::{style="margin-top: 30px; font-size: 25px;"}
:::{.columns}
:::{.column width="50%"}
![](figures/pandas.png){width="90%"}
:::

:::{.column width="50%"}
- `pandas` is the main library for [data manipulation]{.alert} in Python 🐼
- We will use it a lot in this course (and in your life as a data scientist!)
- It is built on top of `numpy` and `matplotlib`, and has [a gazillion functions to work with data](https://pandas.pydata.org/docs/reference/index.html) 😁
- If you use `R` already, think about it as the `dplyr` of Python
  - A list of [equivalences between `dplyr` and `pandas`](https://pandas.pydata.org/docs/getting_started/comparison/comparison_with_r.html)
- We will learn more about it in the next classes
:::
:::
:::

## Applying functions to a dataset

:::{style="margin-top: 30px; font-size: 24px;"}
- The `apply` function is used to [apply a function to a dataset]{.alert}
  - (This course is full of surprises, isn't it? 😄)
- It is a [method of a pandas DataFrame]{.alert}
- It can be used with built-in functions, custom functions, or lambda functions
  - `df.apply(function)`
- You can apply functions to rows or columns
  - `df.apply(function, axis=0)` applies the function to each column (default)
  - `df.apply(function, axis=1)` applies the function to each row
:::

## Applying functions to a dataset

:::{style="margin-top: 30px; font-size: 24px;"}
```{python}
#| echo: true
#| eval: true
import numpy as np
import pandas as pd

df = pd.DataFrame({
    'A': [1, 2, 3],
    'B': [4, 5, 6],
    'C': [7, 8, 9]
})

print(df.apply(np.sqrt))
```
```{python}
#| echo: true
#| eval: true
print(df.apply(np.sum, axis=1))
```

```{python}
#| echo: true
#| eval: true
print(df.apply(lambda x: x**2))
```
:::

## Applying functions to a dataset

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
- Let's do a quick exercise

```{python}
#| echo: true
#| eval: true
# Create an empty DataFrame
data = pd.DataFrame()

# Add variables
data["age"] = [18,29,15,32,6]
data["num_underage_siblings"] = [0,0,1,1,0]
data["num_adult_siblings"] = [1,0,0,1,0]

display(data)
```
:::

:::{.column width="50%"}
- Now let's define some functions

```{python}
#| echo: true
#| eval: true
# The first two functions return True/False depending on age constraints
# The third function returns the sum of two numbers
# The fourth function returns a string with the age bracket

fn_iseligible_vote = lambda age: age >= 18

fn_istwenties = lambda age: (age >= 20) & (age < 30)

fn_sum = lambda x,y: x + y

def fn_agebracket(age):
    if (age >= 18):
        status = "Adult"
    elif (age >= 10) & (age < 18):
        status = "Adolescent"
    else:
        status = "Child"
    return(status)
```
:::
:::
:::

## Applying functions to a dataset

:::{style="margin-top: 30px; font-size: 24px;"}
- Now let's apply the functions to the `data["age"]` column

```{python}
#| echo: true
#| eval: true
data["can_vote"]    = data["age"].apply(fn_iseligible_vote)
data["in_twenties"] = data["age"].apply(fn_istwenties)
data["age_bracket"] = data["age"].apply(fn_agebracket)

display(data)
```
:::

## Creating a new variable

:::{style="margin-top: 30px; font-size: 24px;"}
- You can also create a new variable using the `apply` function
  
```{python}
#| echo: true
#| eval: true
# Creating a new variable
data["new_var"] = data["age"].apply(lambda age: age >= 18)

display(data)
```
:::

## Deleting a variable

:::{style="margin-top: 30px; font-size: 24px;"}
- You can also delete a variable using the `drop` function

```{python}
#| echo: true
#| eval: true
data = data.drop(columns = ["new_var"])

display(data)
```
:::

## Mapping functions to a list, array, or series

:::{style="margin-top: 30px; font-size: 22px;"}
- The `map` function is used to [apply a function to a list, an array, or a series]{.alert}
  - A series is a single column of a pandas DataFrame
- [In pandas]{.alert}, `map` works very similarly to the `apply` function, and they are interchangeable when working with series
- `map` can be faster than `apply` for simple functions, but `apply` is more flexible as it can be used with DataFrames (many columns)
- However, if you are using regular lists (e.g., `list01 = [1,2,3]`), you should use `map` instead of `apply`
  - `apply` is not a built-in Python function
  
:::{style="font-size: 20px;"}
:::{.columns}
:::{.column width="50%"}
```{python}
#| echo: true
#| eval: true
data["age_bracket01"] = data["age"].map(fn_agebracket)

display(data[["age","age_bracket01"]])
```
:::

:::{.column width="50%"}
```{python}
#| echo: true
#| eval: true
data["age_bracket02"] = data["age"].apply(fn_agebracket)

display(data[["age","age_bracket02"]])
```
:::
:::
:::
:::

## Mapping functions to a list, array, or series

:::{style="margin-top: 30px; font-size: 21px;"}
:::{.columns}
:::{.column width="50%"}
- Using `map` with a list and an array
```{python}
#| echo: true
#| eval: true
# Create a list
list01 = [1,2,3,4,5]

# Map a function to the list
list02 = list(map(lambda x: x**2, list01))

print(list02)
```
```{python}
#| echo: true
#| eval: true
# Create a numpy array
array01 = np.array([1,2,3,4,5])

# Map a function to the array
array02 = np.array(list(map(lambda x: x**2, array01)))

print(array02)
```
:::

:::{.column width="50%"}
- Trying to use `apply` with a list or an array will raise an error
```{python}
#| echo: true
#| eval: false
# Create a list
list01 = [1,2,3,4,5]

# Apply a function to the list
list02 = list(apply(lambda x: x**2, list01))

print(list02)
```

```{verbatim}
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In[168], line 5
      2 list01 = [1,2,3,4,5]
      4 # Apply a function to the list
----> 5 list02 = list(apply(lambda x: x**2, list01))
      7 print(list02)

NameError: name 'apply' is not defined
```
:::
:::
:::

## Try it yourself! 🚀 {#sec:exercise-02}

:::{style="margin-top: 30px; font-size: 24px;"}
- Write a lambda function checking whether `num_siblings` $\ge 1$
- Add a variable to the dataset called `has_siblings`
- Assign True/False to this variable using `apply()`
- [[Appendix 02]{.button}](#sec:appendix-02)
:::

## Try it yourself! 🚀 {#sec:exercise-03}

:::{style="margin-top: 30px; font-size: 24px;"}
- Read the car dataset `data_raw/features.csv`
- Create a function that tests whether `mpg` $\ge$ 29
- Add a variable `mpg_above_29` which is `True/False` if `mpg` $\ge$ 29
- Store the new dataset to `data_clean/features.csv`
- [[Appendix 03]{.button}](#sec:appendix-03)
:::

## Try it yourself! 🚀 {#sec:exercise-04}
### Last exercise of the day! 🏁

:::{style="margin-top: 30px; font-size: 24px;"}
- Create a lambda function with arguments `{fruit,color}`
- The function returns the string `"A {fruit} is {color}"`
- Create the following two lists:
  - `list_fruits  = ["banana","strawberry","kiwi"]`
  - `list_colors  = ["yellow","red","green"]`
- Use the `list(map())` function to output a list with the form
- `["A banana is yellow","A strawberry is red","A kiwi is green"]`
- [[Appendix 04]{.button}](#sec:appendix-04)
:::

# Importing modules 📦 {background-color="#2d4563"}

## Importing modules
### What is a module?

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
- While `.ipynb` files are great for learning and teaching, they are not the best for sharing code
- When you write a lot of functions, you should save them in a `.py` file, which is a [Python script]{.alert}
- A Python script, or module, is just a file containing Python code
- This code can be functions, classes, or variables
- A folder containing Python scripts is called a [package]{.alert}
- You can import modules to use their code in your own code
:::

:::{.column width="50%"}
- We can import functions into the working environment from a file 

```{python}
#| echo: true
#| eval: true
# Import the folder `scripts` as a package
# And the file `example_functions.py` as `ef`
import scripts.example_functions as ef

print(ef.fn_quadratic(2))
print(ef.fn_cubic(3))

ef.message_hello("Juan")
```
:::
:::
:::

## Importing modules
### Importing variables

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
- You can also import variables from a module
- However, it is not recommended to import variables
- It is better to import functions and use them to create variables
- This is because variables can be changed in the module, leading to unexpected results
:::

:::{.column width="50%"}
- Example:

```{python}
#| echo: true
#| eval: true
import scripts.example_variables as ev

# When we run this code
# the value of alpha will be overwritten

alpha = 1
print(alpha)
print(ev.alpha)

from scripts.example_variables import *

print(alpha)
print(beta)
print(gamma)
print(delta)
```
:::
:::
:::

# And that's it for today! 🎉 {background-color="#2d4563"}

# Thanks very much! 😊 {background-color="#2d4563"}

## Appendix 01 {#sec:appendix-01}

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
```{python}
#| echo: true
#| eval: true
def modify_x():
    global x
    x = x + 5

x = 1

# Now, running the function 
# will permanently increase x by 5.

modify_x()
print(x)
modify_x()
print(x)
```
:::

:::{.column width="50%"}
```{python}
#| echo: true
#| eval: true
def fn_square(x):
    global y
    y = x**2
    return(y)

x = 5
y = -5

print("Example 1:")
print(fn_square(x = 10))
print(x)
print(y)
```
:::
:::

[[Back to exercise 01]{.button}](#sec:exercise-01)
:::

## Appendix 02 {#sec:appendix-02}

:::{style="margin-top: 30px; font-size: 24px;"}
- Write a lambda function checking whether `num_siblings` $\ge 1$
- Add a variable to the dataset called `has_siblings`
- Assign True/False to this variable using `apply()`
 
```{python}
#| echo: true
#| eval: true
fn_has_siblings = lambda num_siblings: num_siblings >= 1

data["has_siblings"] = data["num_adult_siblings"].apply(fn_has_siblings)

display(data[["num_adult_siblings","has_siblings"]])
```

[[Back to exercise 02]{.button}](#sec:exercise-02)
:::

## Appendix 03 {#sec:appendix-03}

:::{style="margin-top: 30px; font-size: 24px;"}
- Read the car dataset `data_raw/features.csv`
- Create a function that tests whether `mpg` $\ge$ 29
- Add a variable `mpg_above_29` which is `True/False` if `mpg` $\ge$ 29
- Store the new dataset to `data_clean/features.csv`

```{python}
#| echo: true
#| eval: true
data_raw = pd.read_csv("data_raw/features.csv")

data_raw["mpg_above_29"] = data_raw["mpg"].apply(lambda mpg: mpg >= 29)

display(data_raw[["mpg","mpg_above_29"]])

data_raw.to_csv("data_clean/features.csv", index = False)
```

[[Back to exercise 03]{.button}](#sec:exercise-03)
:::

## Appendix 04 {#sec:appendix-04}

:::{style="margin-top: 30px; font-size: 24px;"}
- Create a lambda function with arguments `{fruit,color}`
- The function returns the string `"A {fruit} is {color}"`
- Create the following two lists:
  - `list_fruits  = ["banana","strawberry","kiwi"]`
  - `list_colors  = ["yellow","red","green"]`
- Use the `list(map())` function to output a list with the form
- `["A banana is yellow","A strawberry is red","A kiwi is green"]`

```{python}
#| echo: true
#| eval: true
fn_fruitcolor = lambda fruit, color: print("A " + fruit + " is " + color)

list_fruits  = ["banana","strawberry","kiwi"]
list_colors  = ["yellow","red","green"]

list(map(fn_fruitcolor, list_fruits, list_colors))
```

[[Back to exercise 04]{.button}](#sec:exercise-04)
:::