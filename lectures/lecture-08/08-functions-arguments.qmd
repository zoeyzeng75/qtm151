---
title: QTM 151 - Introduction to Statistical Computing II
subtitle: "Lecture 08 - Custom Functions"
date: 2024-09-25
date-format: "DD MMMM, YYYY"
author:
  - name: Danilo Freire
    email: danilo.freire@emory.edu
    affiliations: Emory University
format:
  clean-revealjs:
    self-contained: true
    footer: "[Custom Functions](https://raw.githack.com/danilofreire/qtm151/main/lectures/lecture-08/08-functions-arguments.html)"
transition: slide
transition-speed: default
scrollable: true
engine: jupyter
editor:
  render-on-save: true
---

# I hope you're having a great day! üòä {background-color="#2d4563"}

# Brief recap of last class üìö {background-color="#2d4563"}

## Last class we learned about:

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
- Using `np.random.seed()` to set the seed for reproducibility
- Running simulations to estimate probabilities and expected values
    - `np.random.distribution()`
- How to simulate random variables from different distributions
    - `np.random.normal()`, `np.random.binomial()`, `np.random.poisson()`, etc
- Creating subplots with `plt.subplots()`
- Using `for` loops to iterate over a range of values
:::

:::{.column width="50%"}
![](figures/loop.png)
:::
:::
:::

# Today's plan üìã {background-color="#2d4563"}

## What we will do today:

:::{style="margin-top: 30px; font-size: 24px;"}
- Learn about functions in Python
- Understand the difference between arguments, parameters, and return values
- Define functions with `def` and `return`
- Use functions to encapsulate repetitive code
:::

## But first...
### Let's just finish the last example from last class

:::{style="margin-top: 30px; font-size: 24px;"}
- We were simulating how the uniform distribution behaves as we increase the number of samples
- We will finish this example and then move on to functions
- According to the Central Limit Theorem, the sample mean of a large number of random variables will be approximately normally distributed regardless of the distribution of the original random variables
- We will see how to write simulations and use a subplot to compare the distribution of the sample mean with the normal distribution
:::

## Finishing the last example from last class

:::{style="margin-top: 30px; font-size: 24px;"}
```{python}
#| eval: true
#| echo: true
## Importing libraries
import numpy as np
import matplotlib.pyplot as plt

## Setting the seed
np.random.seed(151)

## Number of simulations
num_simulations = 2000

# Simulate with sample size one
sample_size = 1
vec_xbar = [None] * num_simulations
for iteration in range(num_simulations):
    vec_unif  = np.random.uniform(low = -2, high=2, size = sample_size)
    vec_xbar[iteration] = vec_unif.mean()
plt.hist(vec_xbar)
plt.title("Distribution of Xbar with size 1")
plt.ylabel("Frequency")
plt.xlabel("Values of Xbar")
plt.show()
```
:::

## Finishing the last example from last class
### Now using a for loop to simulate the sample mean for different sample sizes

:::{style="margin-top: 30px; font-size: 24px;"}
```{python}
#| eval: true
#| echo: true
num_simulations = 2000
sample_size_list = [1,10,50,100,200]

for sample_size in sample_size_list:

    # The following command a vector null values, of length "num_simulations"
    vec_xbar = [None] * num_simulations
    
    for iteration in range(num_simulations):
            vec_unif  = np.random.uniform(low = -2, high=2, size = sample_size)
            vec_xbar[iteration] = vec_unif.mean()
    plt.hist(vec_xbar)
    plt.title("Distribution of Xbar when n is " + str(sample_size))
    plt.ylabel("Frequency")
    plt.xlabel("Values of Xbar")
    plt.show()
```
:::

# Functions in Python üêç {background-color="#2d4563"}

## What is a function?
### A function is a block of code that performs a specific task

:::{style="margin-top: 30px; font-size: 25px;"}
- Functions are used to [organise code, make it readable, and reusable]{.alert}
- The main idea behind writing and using functions is that, if you have to do the same task multiple times, you can write a function to do that task and then call it whenever you want
- A (somewhat silly) rule of thumb is that if you do the same task more than three times, you should write a function for it
- As your code grows, functions will help you keep it maintainable and scalable
- We have already seen lots of functions in Python
  - `print()`, `np.mean()`,  `plt.hist()`, `type()`, etc
- These functions are built-in, but you can also [create your own functions]{.alert} as we will see today
:::

## What is a function?
### A function is a block of code that performs a specific task

:::{style="margin-top: 30px; font-size: 25px;"}
- Functions have [parameters](https://eitca.org/computer-programming/eitc-cp-ppf-python-programming-fundamentals/functions/function-parameters-and-typing/examination-review-function-parameters-and-typing/what-are-function-parameters-in-python-and-how-are-they-used/), which are the variables that the function expects to receive
  - For example, `np.random.normal()` expects two parameters: the mean (`loc`) and the standard deviation (`scale`). Size is an optional parameter
- Functions can take [arguments](https://en.wikipedia.org/wiki/Parameter_(computer_programming)) and [return values](https://en.wikipedia.org/wiki/Return_statement)
  - For example, `np.random.normal(0, 1)` takes two arguments and returns a random number from a normal distribution with mean 0 and standard deviation 1
- Functions can also have [default arguments](https://en.wikipedia.org/wiki/Default_argument), which are optional
  - If you don't provide a value for a default argument, the function will use the default value
  - Example: `np.random.normal()` will provide a sample of 1 number with mean 0 and standard deviation 1 if you don't provide any arguments
:::

## Some examples 

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
```{python}
#| eval: true
#| echo: true
# Argument: "Hello" 
# Return: Showing the message on screen

print("Hello "+str(24))
```
:::{style="margin-top: 40px; font-size: 24px;"}
:::

```{python}
#| eval: true
#| echo: true
# Argument: ABC
# Return: The type of object, e.g. int, str, boolean, float, etc.

type("ABC")
```
:::

:::{.column width="50%"}
```{python}
#| eval: true
#| echo: true
# First Argument: np.pi (a numeric value)
# Second Argument: 10 (the number of decimals)
# Return: Round the first argument, given the number of decimals in the second argument

round(np.pi,  10)
```
:::{style="margin-top: 40px; font-size: 24px;"}
:::
```{python}
#| eval: true
#| echo: true
list_fruits = ["Apple","Orange","Pear"]

# Argument: list_fruits
# Return: The number of elements in the list
len('Hello')
```

So far, so good? üòä
:::
:::
:::

## Enter arguments by assignment

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
- The most common way to pass arguments to a function is [by assignment]{.alert}
- You can pass arguments [by position or by name]{.alert}
- When you pass arguments by name, you can change the order of the arguments
  - That is the case with many functions in Python, and it makes it easier to remember the arguments
- You can also use default arguments if you don't want to pass a specific value
:::

:::{.column width="50%"}
```{python}
#| eval: true
#| echo: true
# Here "df" and "size" are both parameters
# They get assigned the arguments "2" and "20", respectively
# The return is a vector of random variables

vec_x = np.random.chisquare(df = 2, size = 20)
print(vec_x)
```

```{python}
#| eval: true
#| echo: true
# Another example
vec_y = np.random.normal(loc = 2, scale = 1, size = 20)
print(vec_y)
```

[What are the parameters, arguments, and return values in these examples?]{.alert} ü§ì
:::
:::
:::

# Custom functions in Python üêç {background-color="#2d4563"}

## Defining a function
### You can define a function using the `def` keyword

:::{style="margin-top: 30px; font-size: 22px;"}
:::{.columns}
:::{.column width="50%"}
- You can create your own functions using the `def` keyword
- The syntax is as follows:

```{python}
#| eval: false
#| echo: true

#---- DEFINE
def my_function(parameter):
    body
    return expression

#---- RUN
my_function(parameter = argument) 

#---- RUN
my_function(argument)
```
:::

:::{.column width="50%"}
- The function name should be descriptive, that is, its name should reflect what the function does
- The parameters are the variables that the function expects to receive
  - In our case, the parameter is `parameter` (duh! üòÖ)
- The body is the code that the function will run
  - Please don't forget that the [body should be indented!]{.alert}
- The return statement is optional
  - If you don't provide a return statement, the function will return `None`
  - So it's a good practice to always return something!
:::
:::
:::

## Let's create a function! {#sec:interest}

:::{style="margin-top: 30px; font-size: 24px;"}
- Let's create a function that solves this equation for any combination of numbers:

$$V=P\left(1+{\frac {r}{n}}\right)^{nt}$$

To know what each parameter means, click here: [[Appendix 01]{.button}](#sec:appendix01)

:::{style="margin-top: 40px; font-size: 24px;"}
:::

```{python}
#| eval: true
#| echo: true
def fn_compound_interest(P, r, n, t):
    V = P*(1 + r/n)**(n*t)
    return V
```
:::

## Let's test our function

:::{style="margin-top: 30px; font-size: 24px;"}
- Now that we have defined our function, we can use it to calculate the future value of an investment

```{python}
#| eval: true
#| echo: true
# You can know compute the formula with different values
# Let's see how much one can gain by investing 50k and 100k
# Earning 10% a year for 10 years

V1 = fn_compound_interest(P = 50000, r = 0.10, n = 12, t = 10)
V2 = fn_compound_interest(100000, 0.10, 12, 10)
V3 = fn_compound_interest(r = 0.10, P = 100000, t = 10, n = 12)

print(V1)
print(V2)
print(V3)
```
:::

## Try it yourself! ü§ì {#sec:equation}

:::{style="margin-top: 30px; font-size: 24px;"}
- Now it's your turn to try it out!
- Write a function that calculates

$f(x) = x^2 + 2x + 1$

- Test your function with $x = 2$ and $x = 3$
- [[Appendix 02]{.button}](#sec:appendix02)
:::

## Try it yourself! ü§ì {#sec:names}

:::{style="margin-top: 30px; font-size: 24px;"}
- Write a function with a parameter `numeric_grade`
- Inside the function write an if/else statement for $grade \ge 55$.
- If it's true, then assign `status = pass`
- If it's false, then assign `status = fail`
- Return the value of `status`
- Test your function with $numeric\_grade = 60$
- [[Appendix 03]{.button}](#sec:appendix03)
:::

# Lambda functions  {background-color="#2d4563"}

## Lambda functions

:::{style="margin-top: 30px; font-size: 24px;"}
- Lambda functions are [short functions, which you can write in one line]{.alert}
- They can have any number of arguments but only one expression (no return statement)
- They are used when you need a simple function for a short period of time
- They are also known as [anonymous functions](https://en.wikipedia.org/wiki/Anonymous_function), although you can assign them to a variable
- Format: `my_function = lambda parameters: expression`
  - Example: `fn_squared = lambda x: x**2`

- More information [here](https://realpython.com/python-lambda/)
:::

## Lambda functions

:::{style="margin-top: 30px; font-size: 24px;"}
- Example: calculate $x + y + z$ using a lambda function
- The function will take three arguments: $x$, $y$, and $z$

```{python}
#| eval: true
#| echo: true
fn_sum = lambda x, y, z: x + y + z

result = fn_sum(1, 2, 3)
print(result)
```

:::{style="margin-top: 40px; font-size: 24px;"}
:::

```{python}
#| eval: true
#| echo: true
fn_v = lambda P, r, n, t: P*(1+(r/n))**(n*t)

result = fn_v(50000, 0.10, 12, 10)
print(result)
```
:::

## Try it yourself! ü§ì {#sec:lambda}
### Boleean + Functions

:::{style="margin-top: 30px; font-size: 24px;"}
- Write a function called `fn_iseligible_vote`
- This functions returns a boolean value that checks whether $age \ge$ 18
- Test your function with $age = 20$
- [[Appendix 04]{.button}](#sec:appendix04)
:::

## Last one! ü§ì {#sec:list}
### `For` loop + Functions

:::{style="margin-top: 30px; font-size: 24px;"}
- Create `list_ages = [18,29,15,32,6]`
- Write a loop that checks whether above ages are eligible to vote
- Use the above function
- [[Appendix 05]{.button}](#sec:appendix05)
:::

# And that's it for today! üéâ {background-color="#2d4563"}

# Have a great day! üòä {background-color="#2d4563"}

## Appendix 01: Compound Interest Equation {#sec:appendix01}

:::{style="margin-top: 30px; font-size: 24px;"}
- $V$ is the future value of the investment/loan, including interest
- $P$ is the principal investment amount (the initial deposit or loan amount)
- $r$ is the annual interest rate (decimal)
- $n$ is the number of times that interest is compounded per year
- $t$ is the time the money is invested/borrowed for, in years
- [More information](https://en.wikipedia.org/wiki/Compound_interest)

[[Back to the function]{.button}](#sec:interest)
:::

## Appendix 02: Quadratic Equation {#sec:appendix02}

:::{style="margin-top: 30px; font-size: 24px;"}
```{python}
#| eval: true
#| echo: true
def fn_quadratic(x):
    f = x**2 + 2*x + 1
    return f

f1 = fn_quadratic(2)
f2 = fn_quadratic(3)

print(f1)
print(f2)
```

[[Back to the exercise]{.button}](#sec:equation)
:::

## Appendix 03: Pass/Fail Function {#sec:appendix03}

:::{style="margin-top: 30px; font-size: 24px;"}
```{python}
#| eval: true
#| echo: true
def fn_pass_fail(numeric_grade):
    if numeric_grade >= 55:
        status = "pass"
    else:
        status = "fail"
    return status

status = fn_pass_fail(60)
print(status)
```

[[Back to the exercise]{.button}](#sec:names)
:::

## Appendix 04: Lambda Function {#sec:appendix04}

:::{style="margin-top: 30px; font-size: 24px;"}
```{python}
#| eval: true
#| echo: true
fn_iseligible_vote = lambda age: age >= 18

result = fn_iseligible_vote(20)
print(result)
```

[[Back to the exercise]{.button}](#sec:lambda)
:::

## Appendix 05: For loop + Function {#sec:appendix05}

:::{style="margin-top: 30px; font-size: 24px;"}
```{python
#| eval: true
#| echo: true
list_ages = [18,29,15,32,6]

for age in list_ages:
    result = fn_iseligible_vote(age)
    print(f"Age: {age} - Eligible to vote: {result}")
```
    
[[Back to the exercise]{.button}](#sec:list)
:::
